<?php
/**
 * @file
 * Contains Subgroup functionality for the Group module.
 *
 * Please note that this only adds a UI and access checks for creating
 * subgroups. Nothing stops you from still programmatically creating
 * subgroups with Group::addSubgroup(). Using both at the same time is
 * strongly discouraged unless you know what you are doing.
 */

/**
 * Load our entity functions without polluting the .module file.
 */
require_once 'ggroup.entity.inc';

/**
 * Load our router functions without polluting the .module file.
 */
require_once 'ggroup.router.inc';

/**
 * Implements hook_schema_alter().
 *
 * Informs Drupal of the changes we made to {group_membership}.
 */
function ggroup_schema_alter(&$schema) {
  // Include the install file for its helper functions.
  module_load_install('ggroup');

  // Add the parent_mid field.
  $schema['group_membership']['fields']['parent_mid'] = _ggroup_parent_mid();

  // Add the parent_mid foreign key.
  $schema['group_membership']['foreign keys']['parent_mid'] = array(
    'table' => 'group_membership',
    'columns' => array('parent_mid' => 'mid'),
  );
}

/**
 * Implements hook_theme().
 */
function ggroup_theme() {
  $theme['ggroup_inheritance_table'] = array(
    'render element' => 'element',
    'file' => 'theme/ggroup.config.inc',
  );

  return $theme;
}

/**
 * Determines the inheritance a membership triggers.
 *
 * @param GroupMembership $group_membership
 *   The membership to get inheritance data for.
 *
 * @return array
 *   An array of roles to inherit, keyed by the group id. If a membership
 *   should be inherited without any roles, an empty array will be returned.
 */
function ggroup_get_inheritance(GroupMembership $group_membership) {
  // Create an EMW to reduce the code below.
  $emw = entity_metadata_wrapper('group_membership', $group_membership);

  // Retrieve the child entities for the membership's group.
  $entities = $emw->group->value()->getEntities();

  // Retrieve the membership's group type configuration array.
  $config = $emw->group->group_type->value()->config;

  // Without subgroups or subgroup configuration, there is nothing to do.
  if (empty($entities['group']) || empty($config['subgroup'])) {
    return array();
  }

  // Inheritance data will be stored here.
  $memberships = array();

  // Check inheritance for the configured subgroups.
  foreach ($config['subgroup'] as $type => $data) {
    // Only act if there are subgroups of this type.
    if (empty($entities['group'][$type])) {
      continue;
    }

    // Reset the inherited roles on every iteration.
    $inherited = array();

    // Check if the membership triggers any inherited roles.
    foreach ($data as $role => $inherits) {
      // If the member had the required role, grant the inherited roles.
      if ($role == 'member' || in_array($role, $group_membership->roles)) {
        $inherited += array_filter($inherits);
      }
    }

    // Add the inherited roles to the list.
    if (!empty($inherited)) {
      // We don't need to set 'member' explicitly, so remove it.
      unset($inherited['member']);

      // Turn the $inherited array into a valid roles array.
      $inherited = array_keys($inherited);

      // Set the actual roles array for every inherited membership.
      foreach (array_keys($entities['group'][$type]) as $gid) {
        $memberships[$gid] = $inherited;
      }
    }
  }

  return $memberships;
}

/**
 * Determines the inheritance a membership should have received.
 *
 * This function is a lightweight alternative to ggroup_get_inheritance(). It
 * allows you to quickly check what roles an inherited membership should have
 * received from its parent membership.
 *
 * @param GroupMembership $group_membership
 *   The membership to get inheritance data for.
 *
 * @return array|false
 *   An array of roles the membership should inherit. If a membership should be
 *   inherited without any roles, an empty array will be returned. If nothing
 *   was to be inherited, FALSE will be returned instead.
 */
function ggroup_get_inherited_roles(GroupMembership $group_membership) {
  // Create an EMW to reduce the code below.
  $emw = entity_metadata_wrapper('group_membership', $group_membership);

  // Retrieve the membership's group type machine name.
  $type = $emw->group->group_type->raw();

  // Retrieve the parent membership.
  $parent = $emw->parent_membership->value();

  // Retrieve the parent membership's group type configuration array.
  $config = $emw->parent_membership->group->group_type->value()->config;

  // Stop here if no configuration was found.
  if (empty($config['subgroup'][$type])) {
    return FALSE;
  }

  // Stores the roles the membership should have gotten.
  $inherited = array();

  // Check if the membership triggers any inherited roles.
  foreach ($config['subgroup'][$type] as $role => $inherits) {
    // If the member had the required role, grant the inherited roles.
    if ($role == 'member' || in_array($role, $parent->roles)) {
      $inherited += array_filter($inherits);
    }
  }

  // Add the inherited roles to the list.
  if (!empty($inherited)) {
    // We don't need to set 'member' explicitly, so remove it.
    unset($inherited['member']);

    // Return $inherited as a valid roles array.
    return array_keys($inherited);
  }

  return FALSE;
}

/**
 * Trigger the inheritance downwards for a membership.
 *
 * @param GroupMembership $parent
 *   The membership to check and run inheritance for towards subgroups.
 * @param array $filter
 *   (optional) An array of group ids to limit the inheritance run to. Can be
 *   used to boost performance when targeting specific subgroups to (re)run
 *   inheritance towards.
 */
function ggroup_run_member_inheritance(GroupMembership $parent, array $filter = array()) {
  // Retrieve the membership status info.
  $status_info = group_membership_status_info();

  // Inactive memberships are not inherited.
  if (empty($status_info[$parent->status]['active'])) {
    return;
  }

  // Check for any possible inherited memberships.
  $inherited = ggroup_get_inheritance($parent);

  // Create the inherited memberships along with the original one.
  foreach ($inherited as $gid => $roles) {
    // Skip if the group id isn't in the filter.
    if (!empty($filter) && !in_array($gid, $filter)) {
      continue;
    }

    // Take special care if the membership exists already.
    if ($group_membership = group_membership_load($gid, $parent->uid)) {
      // Update the roles for clean inherited memberships.
      if ($group_membership->status == 'inherited') {
        $group_membership->roles = $roles;
        $group_membership->save();
      }
    }

    // Otherwise, create an inherited membership.
    else {
      $values = array(
        'gid' => $gid,
        'uid' => $parent->uid,
        'roles' => $roles,
        'status' => 'inherited',
        'parent_mid' => $parent->mid,
      );

      $group_membership = entity_create('group_membership', $values);
      $group_membership->save();
    }
  }
}
