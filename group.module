<?php
/**
 * @file
 * Main module code for the Group project.
 */

/**
 * Load our helper functions without polluting the .module file.
 */
ctools_include('entity.group', 'group', 'helpers');
ctools_include('entity.group_role', 'group', 'helpers');
ctools_include('entity.group_type', 'group', 'helpers');
ctools_include('group', 'group', 'helpers');

/**
 * Implements hook_hook_info().
 *
 * Makes sure this module automatically finds exported Group
 * entities in files using the module.group.inc name pattern.
 */
function group_hook_info() {
  $hooks['default_group_type'] = array(
    'group' => 'group',
  );

  $hooks['default_group_role'] = array(
    'group' => 'group',
  );

  return $hooks;
}

/**
 * Implements hook_entity_info().
 *
 * Defines the entities this module needs to function.
 */
function group_entity_info() {
  $info['group'] = array(
    'label' => t('Group'),
    'plural label' => t('Groups'),
    'description' => t('Groups people and content with roles and permissions.'),
    'entity class' => 'Group',
    'controller class' => 'GroupController',
    'base table' => 'groups',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'gid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'access callback' => 'group_entity_access',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'module' => 'group',
    'admin ui' => array(
      'path' => 'admin/group',
      'file' => 'forms/group.inc',
      'controller class' => 'GroupUIController',
    ),
  );

  $info['group_type'] = array(
    'label' => t('Group type'),
    'plural label' => t('Group types'),
    'description' => t('Define different group types.'),
    'entity class' => 'GroupType',
    'controller class' => 'GroupTypeController',
    'base table' => 'group_type',
    'fieldable' => FALSE,
    'bundle of' => 'group',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'tid',
      'name' => 'name',
      'label' => 'label',
    ),
    'access callback' => 'group_type_access',
    'module' => 'group',
    'admin ui' => array(
      'path' => 'admin/group/type',
      'file' => 'admin/group_type.inc',
      'controller class' => 'GroupTypeUIController',
    ),
    'features controller class' => 'GroupTypeFeaturesController',
  );

  // @todo bundles?
  $info['group_role'] = array(
    'label' => t('Group role'),
    'plural label' => t('Group roles'),
    'description' => t('Define different group roles.'),
    'entity class' => 'GroupRole',
    'controller class' => 'GroupRoleController',
    'base table' => 'group_role',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'rid',
      'name' => 'name',
      'label' => 'label',
    ),
    // Roles are bound to group types.
    'access callback' => 'group_type_access',
    'module' => 'group',
    'admin ui' => array(
      'path' => 'admin/group/role',
      'file' => 'admin/group_role.inc',
      'controller class' => 'GroupRoleUIController',
    ),
    'features controller class' => 'GroupRoleFeaturesController',
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Informs Drupal that our group types are bundles for groups.
 */
function group_entity_info_alter(&$entity_info) {
  foreach (group_types() as $type => $info) {
    $entity_info['group']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/group/type/manage/%group_type',
        'real path' => 'admin/group/type/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer group types'),
      ),
    );
  }
}

/**
 * Implements hook_theme().
 */
function group_theme() {
  $theme['group_permission_description'] = array(
    'variables' => array(
      'permission' => NULL,
      'hide' => NULL,
    ),
    'file' => 'admin/group_type.inc',
  );

  $theme['group_permission_form'] = array(
    'render element' => 'form',
    'file' => 'admin/group_type.inc',
  );

  return $theme;
}

/**
 * Implements hook_menu().
 */
function group_menu() {
  $items['admin/config/people/group'] = array(
    'title' => 'Group settings',
    'description' => 'Configure the Group module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('group_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('configure group module'),
    'file' => 'admin/group.config.inc',
  );

  return $items;
}

/**
 * Implements hook_group_permission().
 */
function group_group_permission() {
  $permissions = array(
    'administer group' => array(
      'title' => t('Administer group'),
      'description' => t('Administer the group, its users and permissions'),
      'restrict access' => TRUE,
    ),
    'view group' => array(
      'title' => t('View group'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_permission().
 */
function group_permission() {
  $permissions = array(
    'configure group module' => array(
      'title' => t('Configure Group module'),
      'restrict access' => TRUE,
    ),
    'administer group types' => array(
      'title' => t('Administer group types, their roles and permissions'),
      'restrict access' => TRUE,
    ),
    'bypass group access' => array(
      'title' => t('Bypass group access control'),
      'description' => t('View, edit and delete all groups regardless of permission restrictions'),
      'restrict access' => TRUE,
    ),
    'access group overview' => array(
      'title' => t('Access the group overview page'),
    ),
  );

  // Generate standard node permissions for all applicable node types.
  foreach (group_types() as $name => $type) {
    $permissions["create $name group"] = array(
      'title' => t('%type_name: Create new group', array('%type_name' => $type->label)),
    );
  }

  return $permissions;
}

/**
 * Entity API access callback for groups.
 *
 * @param string $group_type
 *   (optional) The group type to create. Only needs to be specified
 *   when $op is 'create'.
 */
function group_entity_access($op, $group, $account = NULL, $entity_type = NULL, $group_type = NULL) {
  switch ($op) {
    case 'create':
      return !empty($group_type) && user_access("create $group_type group", $account);
    case 'view':
      return group_access('administer group', $group, $account)
        || group_access('view group', $group, $account);
    case 'update':
    case 'delete':
      return group_access('administer group', $group, $account);
  }
}

/**
 * Access callback: Checks whether the user has permission to add a group.
 */
function _group_add_access() {
  foreach (group_types() as $type) {
    if (group_entity_access('create', NULL, NULL, 'group', $type->name)) {
      return TRUE;
    }
  }

  if (user_access('administer group types')) {
    // There are no group types defined that the user has permission to create,
    // but the user does have the permission to administer the content types, so
    // grant them access to the page anyway.
    return TRUE;
  }

  return FALSE;
}

/**
 * Entity API access callback for group types and roles.
 */
function group_type_access($op, $group_type_or_role, $account = NULL, $entity_type = NULL) {
  return user_access('administer group types', $account);
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Adds a local task to admin/group.
 */
function group_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'group/add' on 'admin/group' page.
  if ($root_path == 'admin/group') {
    $item = menu_get_item('group/add');

    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function group_form_system_themes_admin_form_alter(&$form, &$form_state) {
  $form['admin_theme']['group_admin_theme'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the administration theme when editing or creating groups'),
    '#default_value' => variable_get('group_admin_theme', '0'),
  );

  $form['#submit'][] = 'group_system_themes_admin_form_submit';
}

/**
 * Extra submit handler for admin theme form.
 */
function group_system_themes_admin_form_submit($form, &$form_state) {
  variable_set('group_admin_theme', $form_state['values']['group_admin_theme']);
}

/**
 * Implements hook_admin_paths().
 */
function group_admin_paths() {
  if (variable_get('group_admin_theme')) {
    $paths = array(
      'group/*/edit' => TRUE,
      'group/*/delete' => TRUE,
      'group/add' => TRUE,
      'group/add/*' => TRUE,
    );

    return $paths;
  }
}
