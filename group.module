<?php

/**
 * @file
 * Provides a way to organize your content into Groups and define access
 * control around those groups.
 */

/**
 * Implements hook_form_alter().
 */
function group_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Add group settings to the node type configuration form.
  if ($form_id == 'node_type_form') {
    // Add our custom validation and submit functions.
    $form['#validate'][] = 'group_node_type_form_validate';
    $form['#submit'][] = 'group_node_type_form_submit';

    $form['group'] = array(
      '#type' => 'fieldset',
      '#title' => t('Group settings'),
      '#description' => t('If a content type is a group type, then other content may be posted inside the group. In addition, groups have associated members. If a content type is group content, then it can be posted inside a group and will be subject to the permissions settings on the group. Content cannot be both a group and a group content type.'),
      '#collabsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );

    $is_group_default = 0;
    $is_group_content_default = 0;

    if (isset($form['#node_type']->type)) {
      $group_types = variable_get('group_group_types', array());
      $group_content_types = variable_get('group_group_content_types', array());
      $node_type = $form['#node_type']->type;

      // Check to see if the current node type is a group type.
      if (in_array($node_type, $group_types)) {
        $is_group_default = 1;
      }

      // Check to see if the current node type is a group content type.
      if (in_array($node_type, $group_content_types)) {
        $is_group_content_default = 1;
      }
    }

    $form['group']['is_group'] = array(
      '#type' => 'radios',
      '#title' => t('Group'),
      '#options' => array(
        0 => t('Not a group type'),
        1 => t('Group type'),
      ),
      '#default_value' => $is_group_default,
    );

    $form['group']['is_group_content'] = array(
      '#type' => 'radios',
      '#title' => t('Group content'),
      '#options' => array(
        0 => t('Not a group content type'),
        1 => t('Group content type'),
      ),
      '#default_value' => $is_group_content_default,
    );
  }
}

/**
 * Validation callback for node_type_form.
 */
function group_node_type_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if ($values['is_group'] == 1 && $values['is_group_content'] == 1) {
    form_set_error('group][is_group', t('A content type cannot be both a group and group content.'));
  }
}

/**
 * Submit callback for node_type_form.
 */
function group_node_type_form_submit($form, &$form_state) {
  // Get the current list of group types and group content types.
  $group_types = variable_get('group_group_types', array());
  $group_content_types = variable_get('group_group_content_types', array());
  $node_type = $form['#node_type']->type;

  $values = $form_state['values'];

  if ($values['is_group'] == 1) {
    $group_types[$node_type] = $node_type;
    variable_set('group_group_types', $group_types);
  }

  if ($values['is_group_content'] == 1) {
    $group_content_types[$node_type] = $node_type;
    variable_set('group_group_content_types', $group_content_types);
  }

  if ($values['is_group'] == 0) {
    unset($group_types[$node_type]);
    variable_set('group_group_types', $group_types);
  }

  if ($values['is_group_content'] == 0) {
    unset($group_content_types[$node_type]);
    variable_set('group_group_content_types', $group_content_types);
  }
}
