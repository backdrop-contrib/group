<?php
/**
 * @file
 * Main module code for the Group project.
 */

/**
 * Load our helper functions without polluting the .module file.
 */
module_load_include('inc', 'group', 'helpers/group.entity');
module_load_include('inc', 'group', 'helpers/group_membership.entity');
module_load_include('inc', 'group', 'helpers/group_role.entity');
module_load_include('inc', 'group', 'helpers/group_type.entity');
module_load_include('inc', 'group', 'helpers/group');

/**
 * Load our entity functions without polluting the .module file.
 */
module_load_include('inc', 'group', 'group.entity');

/**
 * Load our router functions without polluting the .module file.
 */
module_load_include('inc', 'group', 'group.router');

/**
 * Implements hook_hook_info().
 *
 * Makes sure this module automatically finds exported Group
 * entities in files using the module.group.inc name pattern.
 */
function group_hook_info() {
  $hooks['default_group_type'] = array(
    'group' => 'group',
  );

  $hooks['default_group_role'] = array(
    'group' => 'group',
  );

  return $hooks;
}

/**
 * Implements hook_theme().
 */
function group_theme() {
  $theme['group_permission_description'] = array(
    'variables' => array(
      'permission' => NULL,
      'hide' => NULL,
    ),
    'file' => 'theme/group.permission.inc',
  );

  $theme['group_permission_form'] = array(
    'render element' => 'form',
    'file' => 'theme/group.permission.inc',
  );

  return $theme;
}

/**
 * Implements hook_permission().
 */
function group_permission() {
  $permissions = array(
    'configure group module' => array(
      'title' => t('Configure Group module'),
      'restrict access' => TRUE,
    ),
    'administer group types' => array(
      'title' => t('Administer group types, their roles and permissions'),
      'restrict access' => TRUE,
    ),
    'bypass group access' => array(
      'title' => t('Bypass group access control'),
      'description' => t('View, edit and delete all groups regardless of permission restrictions'),
      'restrict access' => TRUE,
    ),
    'access group overview' => array(
      'title' => t('Access the group overview page'),
    ),
  );

  // Generate group creation permissions.
  foreach (group_types() as $name => $group_type) {
    $permissions["create $name group"] = array(
      'title' => t('%type_name: Create new group', array('%type_name' => $group_type->label)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_group_permission().
 */
function group_group_permission() {
  $permissions = array(
    'administer group' => array(
      'title' => t('Administer group'),
      'description' => t('Administer the group, its content and members'),
      'restrict access' => TRUE,
    ),
    'administer members' => array(
      'title' => t('Administer group members'),
      'description' => t('Administer the group members'),
      'restrict access' => TRUE,
    ),
    'access member overview' => array(
      'title' => t('Access the member overview page'),
    ),
    'view group' => array(
      'title' => t('View group'),
    ),
    'view members' => array(
      'title' => t('View group members'),
    ),
    'subscribe' => array(
      'title' => t('Subscribe to group'),
    ),
    'unsubscribe' => array(
      'title' => t('Unsubscribe from group'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function group_form_system_themes_admin_form_alter(&$form, &$form_state) {
  $form['admin_theme']['group_admin_theme'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the administration theme when editing or creating groups'),
    '#default_value' => variable_get('group_admin_theme', '0'),
  );

  $form['#submit'][] = 'group_system_themes_admin_form_submit';
}

/**
 * Extra submit handler for admin theme form.
 */
function group_system_themes_admin_form_submit($form, &$form_state) {
  variable_set('group_admin_theme', $form_state['values']['group_admin_theme']);
}

/**
 * Implements hook_admin_paths().
 */
function group_admin_paths() {
  if (variable_get('group_admin_theme')) {
    $paths = array(
      'group/*/edit' => TRUE,
      'group/*/delete' => TRUE,
      'group/*/members' => TRUE,
      'group/add' => TRUE,
      'group/add/*' => TRUE,
    );

    return $paths;
  }
}

/**
 * Implements hook_group_filters().
 */
function group_group_filters() {
  // Get a list of all group types.
  $group_types = array();
  foreach (group_types() as $name => $group_type) {
    $group_types[$name] = $group_type->label;
  }

  // Build a group type filter.
  $filters['type'] = array(
    'title' => t('Group type'),
    'options' => array(
      '[any]' => t('any'),
    ) + $group_types,
  );

  return $filters;
}

/**
 * Implements hook_group_operations().
 */
function group_group_operations() {
  $operations['delete'] = array(
    'label' => t('Delete selected groups'),
    'callback' => 'group_multiple_delete_confirm',
    'form callback' => TRUE,
  );

  return $operations;
}

/**
 * Implements hook_group_operation_links().
 */
function group_group_operation_links($group) {
  $operations = array();

  // Retrieve the destination url.
  $destination = drupal_get_destination();

  // Add an 'edit' link if available.
  if (group_access('update', $group)) {
    $operations['edit'] = array(
      'title' => t('edit'),
      'href' => "group/$group->gid/edit",
      'query' => $destination,
    );
  }

  // Add a 'delete' link if available.
  if (group_access('delete', $group)) {
    $operations['delete'] = array(
      'title' => t('delete'),
      'href' => "group/$group->gid/delete",
      'query' => $destination,
    );
  }

  return $operations;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Alters the query that generates the group overview table on the
 * admin/group page by using the selected filters. You can find the
 * full query in group_groups_form().
 *
 * @see hook_group_filters()
 * @see group_groups_form()
 */
function group_query_group_overview_alter(QueryAlterableInterface $query) {
  // Retrieve the selected filters.
  $filters = $query->getMetaData('filters');

  if (isset($filters['type'])) {
    $query->condition('g.type', $filters['type']);
  }
}

/**
 * Implements hook_group_member_filters().
 */
function group_group_member_filters() {
  // Build a status filter.
  $filters['status'] = array(
    'title' => t('Status'),
    'options' => array(
      '[any]' => t('any'),
      1 => t('active'),
      0 => t('blocked'),
    ),
  );

  return $filters;
}

/**
 * Implements hook_group_member_operations().
 *
 * Callbacks are situated in forms/group.members.inc.
 */
function group_group_member_operations($group) {
  $operations['remove'] = array(
    'label' => t('Remove selected members'),
    'callback' => 'group_membership_multiple_delete_confirm',
    'form callback' => TRUE,
  );

  foreach (group_type_load($group->type)->getRoles(FALSE) as $group_role) {
    $operations["add-$group_role->name"] = array(
      'label' => $group_role->label,
      'callback' => 'group_membership_add_role',
      'callback arguments' => array($group_role->name),
      'optgroup' => t('Add role to selected members'),
    );

    $operations["remove-$group_role->name"] = array(
      'label' => $group_role->label,
      'callback' => 'group_membership_remove_role',
      'callback arguments' => array($group_role->name),
      'optgroup' => t('Remove role from selected members'),
    );
  }

  return $operations;
}

/**
 * Implements hook_group_member_operation_links().
 *
 * @todo Actually implement the two links below.
 */
function group_group_member_operation_links($group_membership) {
  $operations = array();

  // Retrieve the destination url.
  $destination = drupal_get_destination();

  // Add membership management links.
  if (group_access('administer members', group_load($group_membership->gid))) {
    $operations['edit-membership'] = array(
      'title' => t('edit'),
      'href' => 'group/member/' . $group_membership->mid . '/edit',
      'query' => $destination,
    );

    $operations['cancel-membership'] = array(
      'title' => t('cancel'),
      'href' => 'group/member/' . $group_membership->mid . '/cancel',
      'query' => $destination,
    );
  }

  return $operations;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Alters the query that generates the member overview table on the
 * group/%/members page by using the selected filters. You can find the
 * full query in group_members_form().
 *
 * @see hook_group_member_filters()
 * @see group_members_form()
 */
function group_query_group_member_overview_alter(QueryAlterableInterface $query) {
  // Retrieve the selected filters.
  $filters = $query->getMetaData('filters');

  if (isset($filters['status']) && in_array($filters['status'], array('0', '1'))) {
    $query->condition('u.status', $filters['status']);
  }
}
